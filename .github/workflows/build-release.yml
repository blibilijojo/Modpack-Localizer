# 文件路径: .github/workflows/build-release.yml

# 工作流的名称，会显示在 GitHub Actions 页面
name: Build and Release Executable

# 触发条件：当一个以 'v' 开头的标签被推送到仓库时
on:
  push:
    tags:
      - 'v*' # 匹配 v1.0, v1.2.3, v2.0-beta 等标签

jobs:
  # 定义一个名为 build-release 的任务
  build-release:
    name: Build and Release for Windows
    # 指定任务运行的环境为最新的 Windows Server
    runs-on: windows-latest

    # 任务执行的步骤
    steps:
      # 第 1 步：检出代码
      # 使用一个成熟的 Action (actions/checkout) 来下载你的仓库代码
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      # 第 2 步：设置 Python 环境
      # 使用 action (actions/setup-python) 来安装指定版本的 Python
      - name: 2. Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # 你可以根据你的开发环境更改此版本

      # 第 3 步：安装项目依赖和 PyInstaller
      - name: 3. Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 第 4 步：使用 PyInstaller 打包成 .exe
      # --name: 定义输出的 exe 文件名
      # --onefile: 打包成单个可执行文件
      # --windowed: 为 GUI 应用，运行时不显示命令行黑窗
      # --icon: (可选) 如果你有图标文件，可以取消这行的注释并指定路径，例如 pack.png
      - name: 4. Build with PyInstaller
        run: pyinstaller --name "ModpackLocalizerPro" --onefile --windowed main.py
        # 如果你想给EXE设置图标，并且 pack.png 在你的项目根目录，可以改为：
        # run: pyinstaller --name "ModpackLocalizerPro" --onefile --windowed --icon "pack.png" main.py

      # 【移除第 5 步：压缩可执行文件】
      # 这一步被彻底移除，因为我们不再需要压缩成 ZIP。

      # 第 5 步：创建 GitHub Release 并直接上传打包好的 .exe 文件
      # 注意：这里的序号从 6 改成了 5，因为少了一步。
      - name: 5. Create Release and Upload Executable
        uses: softprops/action-gh-release@v1
        with:
          # 直接上传 dist/ModpackLocalizerPro.exe
          files: dist/ModpackLocalizerPro.exe
        env:
          # GITHUB_TOKEN 是由 GitHub 自动提供的密钥，用于授权 Action 操作你的仓库
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}